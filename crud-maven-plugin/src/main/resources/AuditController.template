package $$PACKAGE$$.audit;

import javax.persistence.EntityManager;

import org.springframework.data.rest.webmvc.RepositoryRestController;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import $$AUDIT_CONTROLLER_CLASS$$;
import $$ENTITY_CLASS$$;
import $$PACKAGE$$.URLs;
$$IMPORT_REVISION_CLASS$$

/**
 * $$ENTITY$$ Audit Rest Repository Controller
 *
 * @author OCTO
 *
 */
@RepositoryRestController
public class $$ENTITY$$AuditController extends $$AUDIT_CONTROLLER$$<$$ENTITY$$$$REVISION_ENTITY$$> {
	
	public $$ENTITY$$AuditController() {
		super($$ENTITY$$.class, $$ENTITY$$AuditController.class);
	}
		
	@RequestMapping(method = RequestMethod.GET, value = com.octo.tools.audit.AbstractAuditController.HISTORY + URLs.$$ENTITY_UPPER_PLURAL$$_SEARCH)
	public @ResponseBody ResponseEntity<?> getRevisionsForEntity(@RequestParam("entityId") $$ID_CLASS$$ id,
			@RequestParam(name = "lastDelRev", required = false, defaultValue = "false") Boolean lastDelRev) {
		EntityManager em = emf.createEntityManager();
		try {
			if(lastDelRev)
				return super.getLastRevisionForDeletedEntity(id, em);
			return super.getRevisionsForEntity(id, em);
		} finally {
			em.close();
		}
	}		
		
		
	@RequestMapping(method = RequestMethod.GET, value = com.octo.tools.audit.AbstractAuditController.HISTORY + URLs.$$ENTITY_UPPER_PLURAL$$_ID)
	public @ResponseBody ResponseEntity<?> getRevisionEntity(@PathVariable("id") Long revId) {
		EntityManager em = emf.createEntityManager();
		try {
			return super.getRevisionEntity(revId, em);
		} finally {
			em.close();
		}
	}	
	
	@RequestMapping(method = RequestMethod.GET, value = com.octo.tools.audit.AbstractAuditController.HISTORY + URLs.$$ENTITY_UPPER_PLURAL$$)
    public @ResponseBody ResponseEntity<?> getRevisions() {
    	EntityManager em = emf.createEntityManager();
		try {
			return super.getRevisions(em);
		} finally {
			em.close();
		}
	}
	
}
